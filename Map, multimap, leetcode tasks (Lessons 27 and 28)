#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

// https://leetcode.com/problems/3sum/ - Medium
// https://leetcode.com/problems/add-two-numbers/ - medium
// 
// https://leetcode.com/problems/add-strings/ - easy
// https://leetcode.com/problems/add-to-array-form-of-integer/ - easy
// https://leetcode.com/problems/same-tree/ - easy
// https://leetcode.com/problems/valid-anagram/ - easy


//----------------------------------------------------------------------

// Task 3 Sum
vector<vector<int>> threeSum(vector<int>& nums)
{
    vector<vector<int>> result;
    vector <int> input;
    int res{};
    int countt{};

    bool _end = false;
    int a = nums.size();

    if (a < 3)
    {
        return result;
    }

    if (nums.empty())
    {
        return result;
    }


    for (int i = 0; i < a; i++)
    {
        for (int j = i + 1; j < a; j++)
        {
            for (int k = j + 1; k < a; k++)
            {
                if (nums[i] == nums[j] || nums[i] == nums[k])
                {
                    res = count(nums.begin(), nums.end(), nums[i]);
                    if (res == 1) continue;
                }

                if (nums[j] == nums[i] || nums[j] == nums[k])
                {
                    res = count(nums.begin(), nums.end(), nums[j]);
                    if (res == 1) continue;
                }

                if (nums[k] == nums[i] || nums[k] == nums[j])
                {
                    res = count(nums.begin(), nums.end(), nums[k]);
                    if (res == 1) continue;
                }


                if ((nums[i] + nums[j] + nums[k]) == 0)
                {
                    input = { nums[i],nums[j],nums[k] };
                    sort(input.begin(), input.end());
                    for (int x = 0; x < result.size(); x++)
                    {
                        for (int d = 0; d < result[0].size(); d++)
                        {
                            _end = false;
                            if (result[x][d] == input[d])
                            {
                                countt++;
                            }

                            if (countt == 3) { _end = true; countt = 0; break; }
                        }
                        if (_end) break;
                        countt = 0;
                    }
                    if (_end) continue;

                    result.push_back(input);
                }
            }
        }
    }

    return result;
}



// Task Add Strings
string addStrings(string num1, string num2)
{
    string result;
    string a{};


    if (num1.length() == num2.length())
    {
        int sum{};
        int extra{};
        for (int i = num1.length(); i > 0; i--)
        {
            sum = (num1[i - 1] - '0') + (num2[i - 1] - '0') + extra;

            if (sum >= 10) { sum = sum - 10; extra = 1; }
            else extra = 0;

            result.append(to_string(sum));
            if (i == 1 && extra == 1)
            {
                result.append(to_string(extra));
            }
            sum = 0;
        }

        reverse(result.begin(), result.end());

        return result;
    }

    else if (num1.length() > num2.length())
    {
        for (int i = 0; i < num1.length() - num2.length(); i++)
            a.push_back('0');

        num2 = a + num2;
        result = addStrings(num1, num2);
        return result;
    }

    else if (num2.length() > num1.length())
    {
        for (int i = 0; i < num2.length() - num1.length(); i++)
            a.push_back('0');

        num1 = a + num1;
        result = addStrings(num1, num2);
        return result;
    }

    return result;
}
